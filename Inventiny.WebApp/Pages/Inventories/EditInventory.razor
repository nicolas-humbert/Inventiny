@using Inventiny.UseCases.Inventories.Interfaces;

@page "/edit-inventory/{InventoryId:int}"

@inject NavigationManager NavigationManager
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase

<h3>Edit Inventory</h3>

<br/>

<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
        @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
        @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
        @bind-Value="inventory.Price"
                     class="form-control">
        </InputNumber>
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-danger" @onclick="CancelEditInventory">Cancel</button>
</EditForm>


@code {
    [Parameter]
    public int InventoryId { get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(InventoryId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCase.ExecuteAsync(inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void CancelEditInventory()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
